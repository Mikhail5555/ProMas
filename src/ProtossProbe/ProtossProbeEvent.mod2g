use ProtossProbe as knowledge.
use ProtossScout as module.
use "../General/General" as knowledge.
use "../General/GeneralEvents" as module.

module ProtossProbeEvent {
	
	% Find all friendly Units
	forall bel(friendly(Type,Id,Conditions)), not(percept(friendly(Type,Id,Conditions))) do delete(friendly(Type,Id,Conditions)).
	forall percept(friendly(Type,Id,Conditions)), not(bel(friendly(Type,Id,Conditions))) do insert(friendly(Type,Id,Conditions)).
	
	if percept(status(Health, Shield, Energy, Cond, X, Y)), bel(status(OldHealth, OldShield, OldEnergy, OldCond, OldX, OldY)) 
		then delete(status(OldHealth, OldShield, OldEnergy, OldCond, OldX, OldY)) + insert(status(Health, Shield, Energy, Cond, X, Y)).
	
	% Ask manager the base location if not yet known
	if not(bel(ownBase(_,_)))
		then (manager).send?(ownBase).
		
	% Insert ownBase location into believe
	if (_).sent:(ownBase(X, Y))
		then insert(ownBase(X, Y)).
	
	% Received builder task from the Manager
	if (_).sent:(builder)
		then insert(builder).
		
	if (_).sent(scout)
		then insert(scout).
		
	forall (_).sent:(scout), bel(base(X,Y,_,_))
		do insert(scout) + adopt(visited(X,Y)).
		
	% Received gasCollector task from the Manager
	if (_).sent:(gasCollector)
		then insert(gasCollector).
		
	if bel(scout) then ProtossScout.
		
	% Run the general module
	if true
		then GeneralEvents.	
		
	% The handling of the mineralfields	percepts (update amounts).
	% Amount is always > 1, as mineralFields dissapear from the game when empty.
	forall bel(mineralField(Id,Amount,Group,X,Y)), not(percept(mineralField(Id,Amount,Group,X,Y))) do delete(mineralField(Id,Amount,Group,X,Y)).
	forall percept(mineralField(Id,Amount,Group,X,Y)), not(bel(mineralField(Id,Amount,Group,X,Y))) do insert(mineralField(Id,Amount,Group,X,Y)).
	
	% Become aware of all the vespeneGeysers
	forall percept(vespeneGeyser(Id,Amount,_,X,Y)), not(bel(vespeneGeyser(Id,Amount,X,Y))) 
		do insert(vespeneGeyser(Id,Amount,X,Y)).
	
	% The handling of the workerActivity percept
	if percept(workerActivity(NewActivity)), bel(workerActivity(OldActivity), NewActivity \= OldActivity) 
		then delete(workerActivity(OldActivity)) + insert(workerActivity(NewActivity)).
			
	% If we need a Pylon, set target to build an Pylon
	if bel(not(target("Protoss Pylon", 1))), bel(builder), bel(resources(_,_,Y,X), Y + 4 >= X), bel(not(friendly("Protoss Pylon", ID, [beingConstructed])))
		then insert(target("Protoss Pylon", 1)).
			

	% If we meet the requirements build a nexus.	
	if not(bel(target("Protoss Nexus", 1))), bel(builder), bel(resources(X, _,_,_), X >= 500), not(bel(friendly("Protoss Nexus", ID, [beingConstructed])))
		then insert(target("Protoss Nexus", 1)) + print ("inserted target").
	

	% If we need gas set target to build an Assimilator
	if bel(friendly("Protoss Assimilator",ID,_)), bel(gasCollector)
		then adopt(workerActivity(gatheringGas)).
	
	% Check the gathered goals
	if goal(gathered(Id)), not(bel(mineralField(Id,_,_, X1, Y1)))
		then insert(gathered(Id)).
	
}