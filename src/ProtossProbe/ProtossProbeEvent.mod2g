use ProtossProbe as knowledge.
use ProtossProbeScout as module.
use ProtossProbeBuilder as module.
use ProtossProbeBuilderTerran as module.
use "../General/General" as knowledge.
use "../General/GeneralEvents" as module.

module ProtossProbeEvent {
	
	% Ask manager the base location if not yet known
	if not(bel(ownBase(_,_))) 
		then (manager).send?(ownBase).
		
	% Insert ownBase location into believe
	if (_).sent:(ownBase(X, Y))
		then insert(ownBase(X, Y)).
	
	% Receive Builder task from the Manager.
	if (_).sent:(builder)
		then insert(builder).
	
	% Receive Scount task for the Manager.	
	if (_).sent(scout), bel(aggregate_all(count,(base(_, _, true, _)),L), L > 2)
		then insert(scout).
		
	% forall (_).sent:(scout), bel(base(X,Y, true,_))
	%	do insert(scout) + adopt(visited(X,Y)).
		
	% Received gasCollector task from the Manager
	if (_).sent:(gasCollector)
		then insert(gasCollector).
		
	% All modules / updates %
	% Run the general module
	if true
		then GeneralEvents.	
	
	% Update Status Percept
	if percept(status(Health, Shield, Energy, Cond, X, Y)), bel(status(OldHealth, OldShield, OldEnergy, OldCond, OldX, OldY)) 
		then delete(status(OldHealth, OldShield, OldEnergy, OldCond, OldX, OldY)) + insert(status(Health, Shield, Energy, Cond, X, Y)).
	
	% Find all friendly Units
	forall bel(friendly(Type,Id,Conditions)), not(percept(friendly(Type,Id,Conditions))),
	bel(not((Type = "Protoss Probe"))), bel(not((Type = "Protoss Zealot")))
		do delete(friendly(Type,Id,Conditions)).
	forall percept(friendly(Type,Id,Conditions)), not(bel(friendly(Type,Id,Conditions))),
	bel(not((Type = "Protoss Probe"))), bel(not((Type = "Protoss Zealot")))
		do insert(friendly(Type,Id,Conditions)).
				
	% The handling of the mineralfields	percepts (update amounts).
	forall bel(mineralField(Id,Amount,Group,X,Y)), not(percept(mineralField(Id,Amount,Group,X,Y))) 
		do delete(mineralField(Id,Amount,Group,X,Y)).
	forall percept(mineralField(Id,Amount,Group,X,Y)), not(bel(mineralField(Id,Amount,Group,X,Y))) 
		do insert(mineralField(Id,Amount,Group,X,Y)).
	
	% Become aware of all the vespeneGeysers
	forall percept(vespeneGeyser(Id,Amount,_,X,Y)), not(bel(vespeneGeyser(Id,Amount,X,Y))) 
		do insert(vespeneGeyser(Id,Amount,X,Y)).
	
	% The handling of the workerActivity percept
	if percept(workerActivity(NewActivity)), bel(workerActivity(OldActivity), NewActivity \= OldActivity) 
		then delete(workerActivity(OldActivity)) + insert(workerActivity(NewActivity)).
	
	% Run the Scout module if scout.
	if bel(scout, ownBase(_,_))
		then ProtossProbeScout.
		
	% Run the Builder module if Builder.
	if bel(builder) 
		then ProtossProbeBuilderTerran.
		
	% If we need gas set target to build an Assimilator
	if bel(friendly("Protoss Assimilator",ID,_)), bel(gasCollector)
		then adopt(workerActivity(gatheringGas)).
	
	% Check the gathered goals
	if goal(gathered(Id)), not(bel(mineralField(Id,_,_, X1, Y1)))
		then insert(gathered(Id)).
	
}