use ProtossZealot as knowledge.
use "../General/General" as knowledge.
use "../General/GeneralEvents" as module.

module ProtossZealotEvents {
	
	% Ask manager the base location if not yet known
	if not(bel(ownBase(_,_)))
		then (manager).send?(ownBase).
		
	% Insert ownBase location into believe
	if (_).sent:(ownBase(X, Y))
		then insert(ownBase(X, Y)).
	
	% Find all friendly Units
	% forall bel(friendly(Type,Id,Conditions)), not(percept(friendly(Type,Id,Conditions))) do delete(friendly(Type,Id,Conditions)).
	% forall percept(friendly(Type,Id,Conditions)), not(bel(friendly(Type,Id,Conditions))) do insert(friendly(Type,Id,Conditions)).	
	
	% Run the general module
	if true
		then GeneralEvents.	
	
	%send on change percept for the status percept
	if percept(status(NewHealth, NewShield, NewEnergy, NewCond, NewX, NewY)), bel(status(OldHealth, OldShield, OldEnergy, OldCond, OldX, OldY)) then 
		delete(status(OldHealth, OldShield, OldEnergy, OldCond, OldX, OldY)) + insert(status(NewHealth, NewShield, NewEnergy, NewCond, NewX, NewY)).
	
	% Insert enemy when one is detected and delete when enemy is death
	forall percept(enemy(Type, Id, Health, Shields)), bel(not(enemy(Type, Id, Health, Shields))) 
		do insert(enemy(Type, Id, Health, Shields)).
	forall bel(enemy(Type, Id, Health, Shields)) , not(percept(enemy(Type, Id, Health, Shields)))
		do delete(enemy(Type, Id, Health, Shields)).
		
	% Find the only place enemy can be (On small map)
	if not(bel(enemyBase(_, _))), bel(base(X2, Y2, true), ownBase(X1, Y1), distance(X2, Y2, X1, Y1, D), D > 30)
		then insert(enemyBase(X2, Y2)).
	
	% When near base, send to manager that you are ready.
	if bel(not(isReady(_)), ownBase(X1, Y1), status(_,_,_,_,X2,Y2), distance(X1,Y1,X2,Y2,D), D < 30, self(Id, _, _, _, _))
		then (manager).send(isReady(Id)) + insert(isReady(Id)) + print("I am ready to serve").
	
	%%%--- Attacking ---%%%
	
	% Received attack task from the Manager
	if (_).sent(attack)
		then insert(attack).	
	
	% When ready insert attack the X, Y of enemy base
	if not(goal(attack(X, Y))), bel(attack, enemyBase(X, Y))
		then adopt(attack(X, Y)).
	
	
	
}